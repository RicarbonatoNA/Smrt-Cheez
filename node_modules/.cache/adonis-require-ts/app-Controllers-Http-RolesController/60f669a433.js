"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Role_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Role"));
const RolStoreValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/RolStoreValidator"));
class RolesController {
    async index({ response }) {
        try {
            response.ok({ mensaje: 'Hola', data: await Role_1.default.all(), estado: true });
        }
        catch {
            response.badRequest({ mensaje: 'Hubo un error', estado: false });
        }
    }
    async store({ response, request }) {
        try {
            const Rol = await request.validate(RolStoreValidator_1.default);
            await Role_1.default.create(Rol);
            response.created({ mensaje: 'se ha creado', estado: true });
        }
        catch {
            response.badRequest({ mensaje: 'Hubo un error, verifica los datos', estado: false });
        }
    }
    async show({ response, params }) {
        try {
            response.ok({ mensaje: 'se est√° mostrando', data: await Role_1.default.findOrFail(params.id), estado: true });
        }
        catch {
            response.badRequest({ mensaje: 'Hubo un error', estado: false });
        }
    }
    async destroy({ response, params }) {
        try {
            const Reg = await Role_1.default.findOrFail(params.id);
            await Reg.delete();
            response.ok({ mensaje: 'se ha eliminado', estado: true });
        }
        catch {
            response.badRequest({ mensaje: 'Hubo un error', estado: false });
        }
    }
    async update({ response, params, request }) {
        try {
            const Reg = await Role_1.default.findOrFail(params.id);
            Reg.nombre = request.input('nombre');
            await Reg.save();
        }
        catch {
            response.badRequest({ mensaje: 'Hubo un error', estado: false });
        }
    }
}
exports.default = RolesController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm9sZXNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUm9sZXNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQWtDO0FBQ2xDLCtHQUFnRTtBQUVoRSxNQUFxQixlQUFlO0lBQ3pCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQXFCO1FBQzdDLElBQUc7WUFDQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsTUFBTSxjQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUE7U0FDcEU7UUFBQyxNQUFLO1lBQ0gsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxlQUFlLEVBQUUsTUFBTSxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUE7U0FDL0Q7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLFFBQVEsRUFBRSxPQUFPLEVBQXFCO1FBQ3RELElBQUc7WUFDQyxNQUFNLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsMkJBQWlCLENBQUMsQ0FBQTtZQUNyRCxNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDdEIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFDLE9BQU8sRUFBQyxjQUFjLEVBQUUsTUFBTSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUE7U0FDMUQ7UUFBQSxNQUFLO1lBQ0YsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxtQ0FBbUMsRUFBRSxNQUFNLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQTtTQUNuRjtJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBcUI7UUFDcEQsSUFBRztZQUNDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUUsSUFBSSxFQUFDLE1BQU0sY0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUE7U0FDakc7UUFBQyxNQUFLO1lBQ0gsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxlQUFlLEVBQUUsTUFBTSxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUE7U0FDL0Q7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQXFCO1FBQ3ZELElBQUc7WUFDQyxNQUFNLEdBQUcsR0FBRyxNQUFNLGNBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQzVDLE1BQU0sR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFBO1lBQ2xCLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsTUFBTSxFQUFDLElBQUksRUFBQyxDQUFDLENBQUE7U0FDeEQ7UUFBQyxNQUFLO1lBQ0gsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxlQUFlLEVBQUUsTUFBTSxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUE7U0FDL0Q7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFxQjtRQUMvRCxJQUFHO1lBQ0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxjQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUM1QyxHQUFHLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDcEMsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7U0FDbkI7UUFBQyxNQUFLO1lBQ0gsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxlQUFlLEVBQUUsTUFBTSxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUE7U0FDL0Q7SUFDTCxDQUFDO0NBQ0o7QUE5Q0Qsa0NBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBSb2xlIGZyb20gJ0FwcC9Nb2RlbHMvUm9sZSdcbmltcG9ydCBSb2xTdG9yZVZhbGlkYXRvciBmcm9tICdBcHAvVmFsaWRhdG9ycy9Sb2xTdG9yZVZhbGlkYXRvcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9sZXNDb250cm9sbGVyIHtcbiAgICBwdWJsaWMgYXN5bmMgaW5kZXgoe3Jlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgcmVzcG9uc2Uub2soe21lbnNhamU6J0hvbGEnLCBkYXRhOmF3YWl0IFJvbGUuYWxsKCksIGVzdGFkbzp0cnVlfSlcbiAgICAgICAgfSBjYXRjaHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lbnNhamU6J0h1Ym8gdW4gZXJyb3InLCBlc3RhZG86ZmFsc2V9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHN0b3JlKHtyZXNwb25zZSwgcmVxdWVzdH06SHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGNvbnN0IFJvbCA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoUm9sU3RvcmVWYWxpZGF0b3IpXG4gICAgICAgICAgICBhd2FpdCBSb2xlLmNyZWF0ZShSb2wpXG4gICAgICAgICAgICByZXNwb25zZS5jcmVhdGVkKHttZW5zYWplOidzZSBoYSBjcmVhZG8nLCBlc3RhZG86dHJ1ZX0pXG4gICAgICAgIH1jYXRjaHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lbnNhamU6J0h1Ym8gdW4gZXJyb3IsIHZlcmlmaWNhIGxvcyBkYXRvcycsIGVzdGFkbzpmYWxzZX0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc2hvdyh7cmVzcG9uc2UsIHBhcmFtc306SHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIHJlc3BvbnNlLm9rKHttZW5zYWplOidzZSBlc3TDoSBtb3N0cmFuZG8nLCBkYXRhOmF3YWl0IFJvbGUuZmluZE9yRmFpbChwYXJhbXMuaWQpLCBlc3RhZG86dHJ1ZX0pXG4gICAgICAgIH0gY2F0Y2h7XG4gICAgICAgICAgICByZXNwb25zZS5iYWRSZXF1ZXN0KHttZW5zYWplOidIdWJvIHVuIGVycm9yJywgZXN0YWRvOmZhbHNlfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBkZXN0cm95KHtyZXNwb25zZSwgcGFyYW1zfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgY29uc3QgUmVnID0gYXdhaXQgUm9sZS5maW5kT3JGYWlsKHBhcmFtcy5pZClcbiAgICAgICAgICAgIGF3YWl0IFJlZy5kZWxldGUoKVxuICAgICAgICAgICAgcmVzcG9uc2Uub2soe21lbnNhamU6J3NlIGhhIGVsaW1pbmFkbycsIGVzdGFkbzp0cnVlfSlcbiAgICAgICAgfSBjYXRjaHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lbnNhamU6J0h1Ym8gdW4gZXJyb3InLCBlc3RhZG86ZmFsc2V9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZSh7cmVzcG9uc2UsIHBhcmFtcywgcmVxdWVzdH06SHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGNvbnN0IFJlZyA9IGF3YWl0IFJvbGUuZmluZE9yRmFpbChwYXJhbXMuaWQpXG4gICAgICAgICAgICBSZWcubm9tYnJlID0gcmVxdWVzdC5pbnB1dCgnbm9tYnJlJylcbiAgICAgICAgICAgIGF3YWl0IFJlZy5zYXZlKClcbiAgICAgICAgfSBjYXRjaHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lbnNhamU6J0h1Ym8gdW4gZXJyb3InLCBlc3RhZG86ZmFsc2V9KVxuICAgICAgICB9XG4gICAgfVxufVxuIl19